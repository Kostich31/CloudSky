// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: keyboard_mouse_message.proto

#include "../include/keyboard_mouse_message.pb.h" // keyboard_mouse_message.pb.h

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace keyboard_mouse {
constexpr buttons_coords::buttons_coords(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : button_pressed_()
  , x_coord_(int64_t{0})
  , y_coord_(int64_t{0}){}
struct buttons_coordsDefaultTypeInternal {
  constexpr buttons_coordsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~buttons_coordsDefaultTypeInternal() {}
  union {
    buttons_coords _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT buttons_coordsDefaultTypeInternal _buttons_coords_default_instance_;
}  // namespace keyboard_mouse
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_keyboard_5fmouse_5fmessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_keyboard_5fmouse_5fmessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_keyboard_5fmouse_5fmessage_2eproto = nullptr;

const uint32_t TableStruct_keyboard_5fmouse_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::keyboard_mouse::buttons_coords, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::keyboard_mouse::buttons_coords, button_pressed_),
  PROTOBUF_FIELD_OFFSET(::keyboard_mouse::buttons_coords, x_coord_),
  PROTOBUF_FIELD_OFFSET(::keyboard_mouse::buttons_coords, y_coord_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::keyboard_mouse::buttons_coords)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::keyboard_mouse::_buttons_coords_default_instance_),
};

const char descriptor_table_protodef_keyboard_5fmouse_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034keyboard_mouse_message.proto\022\016keyboard"
  "_mouse\"J\n\016buttons_coords\022\026\n\016button_press"
  "ed\030\001 \003(\010\022\017\n\007x_coord\030\002 \001(\003\022\017\n\007y_coord\030\003 \001"
  "(\003b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_keyboard_5fmouse_5fmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_keyboard_5fmouse_5fmessage_2eproto = {
  false, false, 130, descriptor_table_protodef_keyboard_5fmouse_5fmessage_2eproto, "keyboard_mouse_message.proto", 
  &descriptor_table_keyboard_5fmouse_5fmessage_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_keyboard_5fmouse_5fmessage_2eproto::offsets,
  file_level_metadata_keyboard_5fmouse_5fmessage_2eproto, file_level_enum_descriptors_keyboard_5fmouse_5fmessage_2eproto, file_level_service_descriptors_keyboard_5fmouse_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_keyboard_5fmouse_5fmessage_2eproto_getter() {
  return &descriptor_table_keyboard_5fmouse_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_keyboard_5fmouse_5fmessage_2eproto(&descriptor_table_keyboard_5fmouse_5fmessage_2eproto);
namespace keyboard_mouse {

// ===================================================================

class buttons_coords::_Internal {
 public:
};

buttons_coords::buttons_coords(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  button_pressed_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:keyboard_mouse.buttons_coords)
}
buttons_coords::buttons_coords(const buttons_coords& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      button_pressed_(from.button_pressed_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_coord_, &from.x_coord_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_coord_) -
    reinterpret_cast<char*>(&x_coord_)) + sizeof(y_coord_));
  // @@protoc_insertion_point(copy_constructor:keyboard_mouse.buttons_coords)
}

inline void buttons_coords::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_coord_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_coord_) -
    reinterpret_cast<char*>(&x_coord_)) + sizeof(y_coord_));
}

buttons_coords::~buttons_coords() {
  // @@protoc_insertion_point(destructor:keyboard_mouse.buttons_coords)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void buttons_coords::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void buttons_coords::ArenaDtor(void* object) {
  buttons_coords* _this = reinterpret_cast< buttons_coords* >(object);
  (void)_this;
}
void buttons_coords::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void buttons_coords::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void buttons_coords::Clear() {
// @@protoc_insertion_point(message_clear_start:keyboard_mouse.buttons_coords)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  button_pressed_.Clear();
  ::memset(&x_coord_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_coord_) -
      reinterpret_cast<char*>(&x_coord_)) + sizeof(y_coord_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* buttons_coords::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bool button_pressed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_button_pressed(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_button_pressed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 x_coord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          x_coord_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 y_coord = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          y_coord_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* buttons_coords::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:keyboard_mouse.buttons_coords)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool button_pressed = 1;
  if (this->_internal_button_pressed_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_button_pressed(), target);
  }

  // int64 x_coord = 2;
  if (this->_internal_x_coord() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_x_coord(), target);
  }

  // int64 y_coord = 3;
  if (this->_internal_y_coord() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_y_coord(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:keyboard_mouse.buttons_coords)
  return target;
}

size_t buttons_coords::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:keyboard_mouse.buttons_coords)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool button_pressed = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_button_pressed_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // int64 x_coord = 2;
  if (this->_internal_x_coord() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_x_coord());
  }

  // int64 y_coord = 3;
  if (this->_internal_y_coord() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_y_coord());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData buttons_coords::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    buttons_coords::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*buttons_coords::GetClassData() const { return &_class_data_; }

void buttons_coords::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<buttons_coords *>(to)->MergeFrom(
      static_cast<const buttons_coords &>(from));
}


void buttons_coords::MergeFrom(const buttons_coords& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:keyboard_mouse.buttons_coords)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  button_pressed_.MergeFrom(from.button_pressed_);
  if (from._internal_x_coord() != 0) {
    _internal_set_x_coord(from._internal_x_coord());
  }
  if (from._internal_y_coord() != 0) {
    _internal_set_y_coord(from._internal_y_coord());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void buttons_coords::CopyFrom(const buttons_coords& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:keyboard_mouse.buttons_coords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buttons_coords::IsInitialized() const {
  return true;
}

void buttons_coords::InternalSwap(buttons_coords* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  button_pressed_.InternalSwap(&other->button_pressed_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(buttons_coords, y_coord_)
      + sizeof(buttons_coords::y_coord_)
      - PROTOBUF_FIELD_OFFSET(buttons_coords, x_coord_)>(
          reinterpret_cast<char*>(&x_coord_),
          reinterpret_cast<char*>(&other->x_coord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata buttons_coords::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_keyboard_5fmouse_5fmessage_2eproto_getter, &descriptor_table_keyboard_5fmouse_5fmessage_2eproto_once,
      file_level_metadata_keyboard_5fmouse_5fmessage_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace keyboard_mouse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::keyboard_mouse::buttons_coords* Arena::CreateMaybeMessage< ::keyboard_mouse::buttons_coords >(Arena* arena) {
  return Arena::CreateMessageInternal< ::keyboard_mouse::buttons_coords >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

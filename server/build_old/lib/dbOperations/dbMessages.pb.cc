// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbMessages.proto

#include "dbMessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace dbInteraction {
constexpr authInformation::authInformation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct authInformationDefaultTypeInternal {
  constexpr authInformationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~authInformationDefaultTypeInternal() {}
  union {
    authInformation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT authInformationDefaultTypeInternal _authInformation_default_instance_;
constexpr registrationOrLogIn::registrationOrLogIn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , regorlog_(false){}
struct registrationOrLogInDefaultTypeInternal {
  constexpr registrationOrLogInDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~registrationOrLogInDefaultTypeInternal() {}
  union {
    registrationOrLogIn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT registrationOrLogInDefaultTypeInternal _registrationOrLogIn_default_instance_;
constexpr serverAuthInformation::serverAuthInformation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : authorizationstatus_(0)
  , userinfo_(0)
  , serverinfo_(0){}
struct serverAuthInformationDefaultTypeInternal {
  constexpr serverAuthInformationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~serverAuthInformationDefaultTypeInternal() {}
  union {
    serverAuthInformation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT serverAuthInformationDefaultTypeInternal _serverAuthInformation_default_instance_;
constexpr serverRegInformation::serverRegInformation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : authorizationstatus_(0)
  , userinfo_(0)
  , serverinfo_(0){}
struct serverRegInformationDefaultTypeInternal {
  constexpr serverRegInformationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~serverRegInformationDefaultTypeInternal() {}
  union {
    serverRegInformation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT serverRegInformationDefaultTypeInternal _serverRegInformation_default_instance_;
constexpr transactionRequst::transactionRequst(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , productid_(0){}
struct transactionRequstDefaultTypeInternal {
  constexpr transactionRequstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transactionRequstDefaultTypeInternal() {}
  union {
    transactionRequst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transactionRequstDefaultTypeInternal _transactionRequst_default_instance_;
constexpr transactionAnswer::transactionAnswer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gameaccess_()
  , transactionstatus_(0)
  , coins_(0){}
struct transactionAnswerDefaultTypeInternal {
  constexpr transactionAnswerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transactionAnswerDefaultTypeInternal() {}
  union {
    transactionAnswer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transactionAnswerDefaultTypeInternal _transactionAnswer_default_instance_;
constexpr selectedGame::selectedGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gameid_(0){}
struct selectedGameDefaultTypeInternal {
  constexpr selectedGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~selectedGameDefaultTypeInternal() {}
  union {
    selectedGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT selectedGameDefaultTypeInternal _selectedGame_default_instance_;
constexpr registrationInfo::registrationInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : availablegames_()
  , email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , country_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , firstname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secondname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coins_(0)
  , age_(0)
  , fps_(0){}
struct registrationInfoDefaultTypeInternal {
  constexpr registrationInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~registrationInfoDefaultTypeInternal() {}
  union {
    registrationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT registrationInfoDefaultTypeInternal _registrationInfo_default_instance_;
}  // namespace dbInteraction
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dbMessages_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dbMessages_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dbMessages_2eproto = nullptr;

const uint32_t TableStruct_dbMessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbInteraction::authInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbInteraction::authInformation, username_),
  PROTOBUF_FIELD_OFFSET(::dbInteraction::authInformation, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbInteraction::registrationOrLogIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbInteraction::registrationOrLogIn, regorlog_),
  PROTOBUF_FIELD_OFFSET(::dbInteraction::registrationOrLogIn, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbInteraction::serverAuthInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbInteraction::serverAuthInformation, authorizationstatus_),
  PROTOBUF_FIELD_OFFSET(::dbInteraction::serverAuthInformation, userinfo_),
  PROTOBUF_FIELD_OFFSET(::dbInteraction::serverAuthInformation, serverinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbInteraction::serverRegInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbInteraction::serverRegInformation, authorizationstatus_),
  PROTOBUF_FIELD_OFFSET(::dbInteraction::serverRegInformation, userinfo_),
  PROTOBUF_FIELD_OFFSET(::dbInteraction::serverRegInformation, serverinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbInteraction::transactionRequst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbInteraction::transactionRequst, productid_),
  PROTOBUF_FIELD_OFFSET(::dbInteraction::transactionRequst, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbInteraction::transactionAnswer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbInteraction::transactionAnswer, transactionstatus_),
  PROTOBUF_FIELD_OFFSET(::dbInteraction::transactionAnswer, coins_),
  PROTOBUF_FIELD_OFFSET(::dbInteraction::transactionAnswer, gameaccess_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbInteraction::selectedGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbInteraction::selectedGame, gameid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbInteraction::registrationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbInteraction::registrationInfo, email_),
  PROTOBUF_FIELD_OFFSET(::dbInteraction::registrationInfo, username_),
  PROTOBUF_FIELD_OFFSET(::dbInteraction::registrationInfo, password_),
  PROTOBUF_FIELD_OFFSET(::dbInteraction::registrationInfo, country_),
  PROTOBUF_FIELD_OFFSET(::dbInteraction::registrationInfo, firstname_),
  PROTOBUF_FIELD_OFFSET(::dbInteraction::registrationInfo, secondname_),
  PROTOBUF_FIELD_OFFSET(::dbInteraction::registrationInfo, coins_),
  PROTOBUF_FIELD_OFFSET(::dbInteraction::registrationInfo, availablegames_),
  PROTOBUF_FIELD_OFFSET(::dbInteraction::registrationInfo, age_),
  PROTOBUF_FIELD_OFFSET(::dbInteraction::registrationInfo, fps_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dbInteraction::authInformation)},
  { 8, -1, -1, sizeof(::dbInteraction::registrationOrLogIn)},
  { 16, -1, -1, sizeof(::dbInteraction::serverAuthInformation)},
  { 25, -1, -1, sizeof(::dbInteraction::serverRegInformation)},
  { 34, -1, -1, sizeof(::dbInteraction::transactionRequst)},
  { 42, -1, -1, sizeof(::dbInteraction::transactionAnswer)},
  { 51, -1, -1, sizeof(::dbInteraction::selectedGame)},
  { 58, -1, -1, sizeof(::dbInteraction::registrationInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbInteraction::_authInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbInteraction::_registrationOrLogIn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbInteraction::_serverAuthInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbInteraction::_serverRegInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbInteraction::_transactionRequst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbInteraction::_transactionAnswer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbInteraction::_selectedGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbInteraction::_registrationInfo_default_instance_),
};

const char descriptor_table_protodef_dbMessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020dbMessages.proto\022\rdbInteraction\"5\n\017aut"
  "hInformation\022\020\n\010username\030\001 \001(\t\022\020\n\010passwo"
  "rd\030\002 \001(\t\"9\n\023registrationOrLogIn\022\020\n\010regOr"
  "Log\030\001 \001(\010\022\020\n\010username\030\002 \001(\t\"Z\n\025serverAut"
  "hInformation\022\033\n\023authorizationStatus\030\001 \001("
  "\005\022\020\n\010userInfo\030\002 \001(\005\022\022\n\nserverInfo\030\003 \001(\005\""
  "Y\n\024serverRegInformation\022\033\n\023authorization"
  "Status\030\001 \001(\005\022\020\n\010userInfo\030\002 \001(\005\022\022\n\nserver"
  "Info\030\003 \001(\005\"8\n\021transactionRequst\022\021\n\tprodu"
  "ctID\030\001 \001(\005\022\020\n\010username\030\002 \001(\t\"Q\n\021transact"
  "ionAnswer\022\031\n\021transactionStatus\030\001 \001(\005\022\r\n\005"
  "coins\030\002 \001(\005\022\022\n\ngameAccess\030\003 \003(\010\"\036\n\014selec"
  "tedGame\022\016\n\006gameID\030\001 \001(\005\"\276\001\n\020registration"
  "Info\022\r\n\005email\030\001 \001(\t\022\020\n\010username\030\002 \001(\t\022\020\n"
  "\010password\030\003 \001(\t\022\017\n\007country\030\004 \001(\t\022\021\n\tfirs"
  "tName\030\005 \001(\t\022\022\n\nsecondName\030\006 \001(\t\022\r\n\005coins"
  "\030\007 \001(\005\022\026\n\016availableGames\030\010 \003(\010\022\013\n\003age\030\t "
  "\001(\005\022\013\n\003FPS\030\n \001(\005b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dbMessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dbMessages_2eproto = {
  false, false, 704, descriptor_table_protodef_dbMessages_2eproto, "dbMessages.proto", 
  &descriptor_table_dbMessages_2eproto_once, nullptr, 0, 8,
  schemas, file_default_instances, TableStruct_dbMessages_2eproto::offsets,
  file_level_metadata_dbMessages_2eproto, file_level_enum_descriptors_dbMessages_2eproto, file_level_service_descriptors_dbMessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_dbMessages_2eproto_getter() {
  return &descriptor_table_dbMessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dbMessages_2eproto(&descriptor_table_dbMessages_2eproto);
namespace dbInteraction {

// ===================================================================

class authInformation::_Internal {
 public:
};

authInformation::authInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbInteraction.authInformation)
}
authInformation::authInformation(const authInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dbInteraction.authInformation)
}

inline void authInformation::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

authInformation::~authInformation() {
  // @@protoc_insertion_point(destructor:dbInteraction.authInformation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void authInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void authInformation::ArenaDtor(void* object) {
  authInformation* _this = reinterpret_cast< authInformation* >(object);
  (void)_this;
}
void authInformation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void authInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void authInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:dbInteraction.authInformation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* authInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dbInteraction.authInformation.username"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dbInteraction.authInformation.password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* authInformation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbInteraction.authInformation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dbInteraction.authInformation.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dbInteraction.authInformation.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbInteraction.authInformation)
  return target;
}

size_t authInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbInteraction.authInformation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData authInformation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    authInformation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*authInformation::GetClassData() const { return &_class_data_; }

void authInformation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<authInformation *>(to)->MergeFrom(
      static_cast<const authInformation &>(from));
}


void authInformation::MergeFrom(const authInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbInteraction.authInformation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void authInformation::CopyFrom(const authInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbInteraction.authInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool authInformation::IsInitialized() const {
  return true;
}

void authInformation::InternalSwap(authInformation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata authInformation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dbMessages_2eproto_getter, &descriptor_table_dbMessages_2eproto_once,
      file_level_metadata_dbMessages_2eproto[0]);
}

// ===================================================================

class registrationOrLogIn::_Internal {
 public:
};

registrationOrLogIn::registrationOrLogIn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbInteraction.registrationOrLogIn)
}
registrationOrLogIn::registrationOrLogIn(const registrationOrLogIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  regorlog_ = from.regorlog_;
  // @@protoc_insertion_point(copy_constructor:dbInteraction.registrationOrLogIn)
}

inline void registrationOrLogIn::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
regorlog_ = false;
}

registrationOrLogIn::~registrationOrLogIn() {
  // @@protoc_insertion_point(destructor:dbInteraction.registrationOrLogIn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void registrationOrLogIn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void registrationOrLogIn::ArenaDtor(void* object) {
  registrationOrLogIn* _this = reinterpret_cast< registrationOrLogIn* >(object);
  (void)_this;
}
void registrationOrLogIn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void registrationOrLogIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void registrationOrLogIn::Clear() {
// @@protoc_insertion_point(message_clear_start:dbInteraction.registrationOrLogIn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  regorlog_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* registrationOrLogIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool regOrLog = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          regorlog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dbInteraction.registrationOrLogIn.username"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* registrationOrLogIn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbInteraction.registrationOrLogIn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool regOrLog = 1;
  if (this->_internal_regorlog() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_regorlog(), target);
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dbInteraction.registrationOrLogIn.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbInteraction.registrationOrLogIn)
  return target;
}

size_t registrationOrLogIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbInteraction.registrationOrLogIn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // bool regOrLog = 1;
  if (this->_internal_regorlog() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData registrationOrLogIn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    registrationOrLogIn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*registrationOrLogIn::GetClassData() const { return &_class_data_; }

void registrationOrLogIn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<registrationOrLogIn *>(to)->MergeFrom(
      static_cast<const registrationOrLogIn &>(from));
}


void registrationOrLogIn::MergeFrom(const registrationOrLogIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbInteraction.registrationOrLogIn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (from._internal_regorlog() != 0) {
    _internal_set_regorlog(from._internal_regorlog());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void registrationOrLogIn::CopyFrom(const registrationOrLogIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbInteraction.registrationOrLogIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registrationOrLogIn::IsInitialized() const {
  return true;
}

void registrationOrLogIn::InternalSwap(registrationOrLogIn* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  swap(regorlog_, other->regorlog_);
}

::PROTOBUF_NAMESPACE_ID::Metadata registrationOrLogIn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dbMessages_2eproto_getter, &descriptor_table_dbMessages_2eproto_once,
      file_level_metadata_dbMessages_2eproto[1]);
}

// ===================================================================

class serverAuthInformation::_Internal {
 public:
};

serverAuthInformation::serverAuthInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbInteraction.serverAuthInformation)
}
serverAuthInformation::serverAuthInformation(const serverAuthInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&authorizationstatus_, &from.authorizationstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverinfo_) -
    reinterpret_cast<char*>(&authorizationstatus_)) + sizeof(serverinfo_));
  // @@protoc_insertion_point(copy_constructor:dbInteraction.serverAuthInformation)
}

inline void serverAuthInformation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&authorizationstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serverinfo_) -
    reinterpret_cast<char*>(&authorizationstatus_)) + sizeof(serverinfo_));
}

serverAuthInformation::~serverAuthInformation() {
  // @@protoc_insertion_point(destructor:dbInteraction.serverAuthInformation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void serverAuthInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void serverAuthInformation::ArenaDtor(void* object) {
  serverAuthInformation* _this = reinterpret_cast< serverAuthInformation* >(object);
  (void)_this;
}
void serverAuthInformation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void serverAuthInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void serverAuthInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:dbInteraction.serverAuthInformation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&authorizationstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverinfo_) -
      reinterpret_cast<char*>(&authorizationstatus_)) + sizeof(serverinfo_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* serverAuthInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 authorizationStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          authorizationstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 userInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          userinfo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 serverInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          serverinfo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* serverAuthInformation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbInteraction.serverAuthInformation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 authorizationStatus = 1;
  if (this->_internal_authorizationstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_authorizationstatus(), target);
  }

  // int32 userInfo = 2;
  if (this->_internal_userinfo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_userinfo(), target);
  }

  // int32 serverInfo = 3;
  if (this->_internal_serverinfo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_serverinfo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbInteraction.serverAuthInformation)
  return target;
}

size_t serverAuthInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbInteraction.serverAuthInformation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 authorizationStatus = 1;
  if (this->_internal_authorizationstatus() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_authorizationstatus());
  }

  // int32 userInfo = 2;
  if (this->_internal_userinfo() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_userinfo());
  }

  // int32 serverInfo = 3;
  if (this->_internal_serverinfo() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_serverinfo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData serverAuthInformation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    serverAuthInformation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*serverAuthInformation::GetClassData() const { return &_class_data_; }

void serverAuthInformation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<serverAuthInformation *>(to)->MergeFrom(
      static_cast<const serverAuthInformation &>(from));
}


void serverAuthInformation::MergeFrom(const serverAuthInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbInteraction.serverAuthInformation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_authorizationstatus() != 0) {
    _internal_set_authorizationstatus(from._internal_authorizationstatus());
  }
  if (from._internal_userinfo() != 0) {
    _internal_set_userinfo(from._internal_userinfo());
  }
  if (from._internal_serverinfo() != 0) {
    _internal_set_serverinfo(from._internal_serverinfo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void serverAuthInformation::CopyFrom(const serverAuthInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbInteraction.serverAuthInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool serverAuthInformation::IsInitialized() const {
  return true;
}

void serverAuthInformation::InternalSwap(serverAuthInformation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(serverAuthInformation, serverinfo_)
      + sizeof(serverAuthInformation::serverinfo_)
      - PROTOBUF_FIELD_OFFSET(serverAuthInformation, authorizationstatus_)>(
          reinterpret_cast<char*>(&authorizationstatus_),
          reinterpret_cast<char*>(&other->authorizationstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata serverAuthInformation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dbMessages_2eproto_getter, &descriptor_table_dbMessages_2eproto_once,
      file_level_metadata_dbMessages_2eproto[2]);
}

// ===================================================================

class serverRegInformation::_Internal {
 public:
};

serverRegInformation::serverRegInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbInteraction.serverRegInformation)
}
serverRegInformation::serverRegInformation(const serverRegInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&authorizationstatus_, &from.authorizationstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverinfo_) -
    reinterpret_cast<char*>(&authorizationstatus_)) + sizeof(serverinfo_));
  // @@protoc_insertion_point(copy_constructor:dbInteraction.serverRegInformation)
}

inline void serverRegInformation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&authorizationstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serverinfo_) -
    reinterpret_cast<char*>(&authorizationstatus_)) + sizeof(serverinfo_));
}

serverRegInformation::~serverRegInformation() {
  // @@protoc_insertion_point(destructor:dbInteraction.serverRegInformation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void serverRegInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void serverRegInformation::ArenaDtor(void* object) {
  serverRegInformation* _this = reinterpret_cast< serverRegInformation* >(object);
  (void)_this;
}
void serverRegInformation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void serverRegInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void serverRegInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:dbInteraction.serverRegInformation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&authorizationstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverinfo_) -
      reinterpret_cast<char*>(&authorizationstatus_)) + sizeof(serverinfo_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* serverRegInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 authorizationStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          authorizationstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 userInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          userinfo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 serverInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          serverinfo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* serverRegInformation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbInteraction.serverRegInformation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 authorizationStatus = 1;
  if (this->_internal_authorizationstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_authorizationstatus(), target);
  }

  // int32 userInfo = 2;
  if (this->_internal_userinfo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_userinfo(), target);
  }

  // int32 serverInfo = 3;
  if (this->_internal_serverinfo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_serverinfo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbInteraction.serverRegInformation)
  return target;
}

size_t serverRegInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbInteraction.serverRegInformation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 authorizationStatus = 1;
  if (this->_internal_authorizationstatus() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_authorizationstatus());
  }

  // int32 userInfo = 2;
  if (this->_internal_userinfo() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_userinfo());
  }

  // int32 serverInfo = 3;
  if (this->_internal_serverinfo() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_serverinfo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData serverRegInformation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    serverRegInformation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*serverRegInformation::GetClassData() const { return &_class_data_; }

void serverRegInformation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<serverRegInformation *>(to)->MergeFrom(
      static_cast<const serverRegInformation &>(from));
}


void serverRegInformation::MergeFrom(const serverRegInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbInteraction.serverRegInformation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_authorizationstatus() != 0) {
    _internal_set_authorizationstatus(from._internal_authorizationstatus());
  }
  if (from._internal_userinfo() != 0) {
    _internal_set_userinfo(from._internal_userinfo());
  }
  if (from._internal_serverinfo() != 0) {
    _internal_set_serverinfo(from._internal_serverinfo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void serverRegInformation::CopyFrom(const serverRegInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbInteraction.serverRegInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool serverRegInformation::IsInitialized() const {
  return true;
}

void serverRegInformation::InternalSwap(serverRegInformation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(serverRegInformation, serverinfo_)
      + sizeof(serverRegInformation::serverinfo_)
      - PROTOBUF_FIELD_OFFSET(serverRegInformation, authorizationstatus_)>(
          reinterpret_cast<char*>(&authorizationstatus_),
          reinterpret_cast<char*>(&other->authorizationstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata serverRegInformation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dbMessages_2eproto_getter, &descriptor_table_dbMessages_2eproto_once,
      file_level_metadata_dbMessages_2eproto[3]);
}

// ===================================================================

class transactionRequst::_Internal {
 public:
};

transactionRequst::transactionRequst(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbInteraction.transactionRequst)
}
transactionRequst::transactionRequst(const transactionRequst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  productid_ = from.productid_;
  // @@protoc_insertion_point(copy_constructor:dbInteraction.transactionRequst)
}

inline void transactionRequst::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
productid_ = 0;
}

transactionRequst::~transactionRequst() {
  // @@protoc_insertion_point(destructor:dbInteraction.transactionRequst)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transactionRequst::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void transactionRequst::ArenaDtor(void* object) {
  transactionRequst* _this = reinterpret_cast< transactionRequst* >(object);
  (void)_this;
}
void transactionRequst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transactionRequst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transactionRequst::Clear() {
// @@protoc_insertion_point(message_clear_start:dbInteraction.transactionRequst)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  productid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transactionRequst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 productID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          productid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dbInteraction.transactionRequst.username"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* transactionRequst::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbInteraction.transactionRequst)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 productID = 1;
  if (this->_internal_productid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_productid(), target);
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dbInteraction.transactionRequst.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbInteraction.transactionRequst)
  return target;
}

size_t transactionRequst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbInteraction.transactionRequst)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // int32 productID = 1;
  if (this->_internal_productid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_productid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transactionRequst::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transactionRequst::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transactionRequst::GetClassData() const { return &_class_data_; }

void transactionRequst::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<transactionRequst *>(to)->MergeFrom(
      static_cast<const transactionRequst &>(from));
}


void transactionRequst::MergeFrom(const transactionRequst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbInteraction.transactionRequst)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (from._internal_productid() != 0) {
    _internal_set_productid(from._internal_productid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transactionRequst::CopyFrom(const transactionRequst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbInteraction.transactionRequst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transactionRequst::IsInitialized() const {
  return true;
}

void transactionRequst::InternalSwap(transactionRequst* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  swap(productid_, other->productid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata transactionRequst::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dbMessages_2eproto_getter, &descriptor_table_dbMessages_2eproto_once,
      file_level_metadata_dbMessages_2eproto[4]);
}

// ===================================================================

class transactionAnswer::_Internal {
 public:
};

transactionAnswer::transactionAnswer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  gameaccess_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbInteraction.transactionAnswer)
}
transactionAnswer::transactionAnswer(const transactionAnswer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gameaccess_(from.gameaccess_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&transactionstatus_, &from.transactionstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&coins_) -
    reinterpret_cast<char*>(&transactionstatus_)) + sizeof(coins_));
  // @@protoc_insertion_point(copy_constructor:dbInteraction.transactionAnswer)
}

inline void transactionAnswer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transactionstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&coins_) -
    reinterpret_cast<char*>(&transactionstatus_)) + sizeof(coins_));
}

transactionAnswer::~transactionAnswer() {
  // @@protoc_insertion_point(destructor:dbInteraction.transactionAnswer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transactionAnswer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void transactionAnswer::ArenaDtor(void* object) {
  transactionAnswer* _this = reinterpret_cast< transactionAnswer* >(object);
  (void)_this;
}
void transactionAnswer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transactionAnswer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transactionAnswer::Clear() {
// @@protoc_insertion_point(message_clear_start:dbInteraction.transactionAnswer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameaccess_.Clear();
  ::memset(&transactionstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coins_) -
      reinterpret_cast<char*>(&transactionstatus_)) + sizeof(coins_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transactionAnswer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 transactionStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          transactionstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 coins = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          coins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool gameAccess = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_gameaccess(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_gameaccess(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* transactionAnswer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbInteraction.transactionAnswer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 transactionStatus = 1;
  if (this->_internal_transactionstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_transactionstatus(), target);
  }

  // int32 coins = 2;
  if (this->_internal_coins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_coins(), target);
  }

  // repeated bool gameAccess = 3;
  if (this->_internal_gameaccess_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_gameaccess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbInteraction.transactionAnswer)
  return target;
}

size_t transactionAnswer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbInteraction.transactionAnswer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool gameAccess = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_gameaccess_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // int32 transactionStatus = 1;
  if (this->_internal_transactionstatus() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_transactionstatus());
  }

  // int32 coins = 2;
  if (this->_internal_coins() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_coins());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transactionAnswer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transactionAnswer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transactionAnswer::GetClassData() const { return &_class_data_; }

void transactionAnswer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<transactionAnswer *>(to)->MergeFrom(
      static_cast<const transactionAnswer &>(from));
}


void transactionAnswer::MergeFrom(const transactionAnswer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbInteraction.transactionAnswer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  gameaccess_.MergeFrom(from.gameaccess_);
  if (from._internal_transactionstatus() != 0) {
    _internal_set_transactionstatus(from._internal_transactionstatus());
  }
  if (from._internal_coins() != 0) {
    _internal_set_coins(from._internal_coins());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transactionAnswer::CopyFrom(const transactionAnswer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbInteraction.transactionAnswer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transactionAnswer::IsInitialized() const {
  return true;
}

void transactionAnswer::InternalSwap(transactionAnswer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  gameaccess_.InternalSwap(&other->gameaccess_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(transactionAnswer, coins_)
      + sizeof(transactionAnswer::coins_)
      - PROTOBUF_FIELD_OFFSET(transactionAnswer, transactionstatus_)>(
          reinterpret_cast<char*>(&transactionstatus_),
          reinterpret_cast<char*>(&other->transactionstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata transactionAnswer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dbMessages_2eproto_getter, &descriptor_table_dbMessages_2eproto_once,
      file_level_metadata_dbMessages_2eproto[5]);
}

// ===================================================================

class selectedGame::_Internal {
 public:
};

selectedGame::selectedGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbInteraction.selectedGame)
}
selectedGame::selectedGame(const selectedGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:dbInteraction.selectedGame)
}

inline void selectedGame::SharedCtor() {
gameid_ = 0;
}

selectedGame::~selectedGame() {
  // @@protoc_insertion_point(destructor:dbInteraction.selectedGame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void selectedGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void selectedGame::ArenaDtor(void* object) {
  selectedGame* _this = reinterpret_cast< selectedGame* >(object);
  (void)_this;
}
void selectedGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void selectedGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void selectedGame::Clear() {
// @@protoc_insertion_point(message_clear_start:dbInteraction.selectedGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* selectedGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 gameID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* selectedGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbInteraction.selectedGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameID = 1;
  if (this->_internal_gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbInteraction.selectedGame)
  return target;
}

size_t selectedGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbInteraction.selectedGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gameID = 1;
  if (this->_internal_gameid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_gameid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData selectedGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    selectedGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*selectedGame::GetClassData() const { return &_class_data_; }

void selectedGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<selectedGame *>(to)->MergeFrom(
      static_cast<const selectedGame &>(from));
}


void selectedGame::MergeFrom(const selectedGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbInteraction.selectedGame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gameid() != 0) {
    _internal_set_gameid(from._internal_gameid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void selectedGame::CopyFrom(const selectedGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbInteraction.selectedGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool selectedGame::IsInitialized() const {
  return true;
}

void selectedGame::InternalSwap(selectedGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(gameid_, other->gameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata selectedGame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dbMessages_2eproto_getter, &descriptor_table_dbMessages_2eproto_once,
      file_level_metadata_dbMessages_2eproto[6]);
}

// ===================================================================

class registrationInfo::_Internal {
 public:
};

registrationInfo::registrationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  availablegames_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbInteraction.registrationInfo)
}
registrationInfo::registrationInfo(const registrationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      availablegames_(from.availablegames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country(), 
      GetArenaForAllocation());
  }
  firstname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    firstname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_firstname().empty()) {
    firstname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_firstname(), 
      GetArenaForAllocation());
  }
  secondname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secondname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secondname().empty()) {
    secondname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secondname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&coins_, &from.coins_,
    static_cast<size_t>(reinterpret_cast<char*>(&fps_) -
    reinterpret_cast<char*>(&coins_)) + sizeof(fps_));
  // @@protoc_insertion_point(copy_constructor:dbInteraction.registrationInfo)
}

inline void registrationInfo::SharedCtor() {
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
firstname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  firstname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secondname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secondname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coins_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fps_) -
    reinterpret_cast<char*>(&coins_)) + sizeof(fps_));
}

registrationInfo::~registrationInfo() {
  // @@protoc_insertion_point(destructor:dbInteraction.registrationInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void registrationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firstname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secondname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void registrationInfo::ArenaDtor(void* object) {
  registrationInfo* _this = reinterpret_cast< registrationInfo* >(object);
  (void)_this;
}
void registrationInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void registrationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void registrationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dbInteraction.registrationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  availablegames_.Clear();
  email_.ClearToEmpty();
  username_.ClearToEmpty();
  password_.ClearToEmpty();
  country_.ClearToEmpty();
  firstname_.ClearToEmpty();
  secondname_.ClearToEmpty();
  ::memset(&coins_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fps_) -
      reinterpret_cast<char*>(&coins_)) + sizeof(fps_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* registrationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dbInteraction.registrationInfo.email"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dbInteraction.registrationInfo.username"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dbInteraction.registrationInfo.password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string country = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dbInteraction.registrationInfo.country"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string firstName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_firstname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dbInteraction.registrationInfo.firstName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string secondName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_secondname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dbInteraction.registrationInfo.secondName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 coins = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          coins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool availableGames = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_availablegames(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_availablegames(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 age = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 FPS = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* registrationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbInteraction.registrationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dbInteraction.registrationInfo.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dbInteraction.registrationInfo.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dbInteraction.registrationInfo.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  // string country = 4;
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dbInteraction.registrationInfo.country");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_country(), target);
  }

  // string firstName = 5;
  if (!this->_internal_firstname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_firstname().data(), static_cast<int>(this->_internal_firstname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dbInteraction.registrationInfo.firstName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_firstname(), target);
  }

  // string secondName = 6;
  if (!this->_internal_secondname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secondname().data(), static_cast<int>(this->_internal_secondname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dbInteraction.registrationInfo.secondName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_secondname(), target);
  }

  // int32 coins = 7;
  if (this->_internal_coins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_coins(), target);
  }

  // repeated bool availableGames = 8;
  if (this->_internal_availablegames_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_availablegames(), target);
  }

  // int32 age = 9;
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_age(), target);
  }

  // int32 FPS = 10;
  if (this->_internal_fps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_fps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbInteraction.registrationInfo)
  return target;
}

size_t registrationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbInteraction.registrationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool availableGames = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_availablegames_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string email = 1;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string country = 4;
  if (!this->_internal_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string firstName = 5;
  if (!this->_internal_firstname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_firstname());
  }

  // string secondName = 6;
  if (!this->_internal_secondname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secondname());
  }

  // int32 coins = 7;
  if (this->_internal_coins() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_coins());
  }

  // int32 age = 9;
  if (this->_internal_age() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_age());
  }

  // int32 FPS = 10;
  if (this->_internal_fps() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_fps());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData registrationInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    registrationInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*registrationInfo::GetClassData() const { return &_class_data_; }

void registrationInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<registrationInfo *>(to)->MergeFrom(
      static_cast<const registrationInfo &>(from));
}


void registrationInfo::MergeFrom(const registrationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbInteraction.registrationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  availablegames_.MergeFrom(from.availablegames_);
  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  if (!from._internal_country().empty()) {
    _internal_set_country(from._internal_country());
  }
  if (!from._internal_firstname().empty()) {
    _internal_set_firstname(from._internal_firstname());
  }
  if (!from._internal_secondname().empty()) {
    _internal_set_secondname(from._internal_secondname());
  }
  if (from._internal_coins() != 0) {
    _internal_set_coins(from._internal_coins());
  }
  if (from._internal_age() != 0) {
    _internal_set_age(from._internal_age());
  }
  if (from._internal_fps() != 0) {
    _internal_set_fps(from._internal_fps());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void registrationInfo::CopyFrom(const registrationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbInteraction.registrationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registrationInfo::IsInitialized() const {
  return true;
}

void registrationInfo::InternalSwap(registrationInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  availablegames_.InternalSwap(&other->availablegames_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, lhs_arena,
      &other->email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_, lhs_arena,
      &other->country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &firstname_, lhs_arena,
      &other->firstname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secondname_, lhs_arena,
      &other->secondname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(registrationInfo, fps_)
      + sizeof(registrationInfo::fps_)
      - PROTOBUF_FIELD_OFFSET(registrationInfo, coins_)>(
          reinterpret_cast<char*>(&coins_),
          reinterpret_cast<char*>(&other->coins_));
}

::PROTOBUF_NAMESPACE_ID::Metadata registrationInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dbMessages_2eproto_getter, &descriptor_table_dbMessages_2eproto_once,
      file_level_metadata_dbMessages_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dbInteraction
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dbInteraction::authInformation* Arena::CreateMaybeMessage< ::dbInteraction::authInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbInteraction::authInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::dbInteraction::registrationOrLogIn* Arena::CreateMaybeMessage< ::dbInteraction::registrationOrLogIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbInteraction::registrationOrLogIn >(arena);
}
template<> PROTOBUF_NOINLINE ::dbInteraction::serverAuthInformation* Arena::CreateMaybeMessage< ::dbInteraction::serverAuthInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbInteraction::serverAuthInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::dbInteraction::serverRegInformation* Arena::CreateMaybeMessage< ::dbInteraction::serverRegInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbInteraction::serverRegInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::dbInteraction::transactionRequst* Arena::CreateMaybeMessage< ::dbInteraction::transactionRequst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbInteraction::transactionRequst >(arena);
}
template<> PROTOBUF_NOINLINE ::dbInteraction::transactionAnswer* Arena::CreateMaybeMessage< ::dbInteraction::transactionAnswer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbInteraction::transactionAnswer >(arena);
}
template<> PROTOBUF_NOINLINE ::dbInteraction::selectedGame* Arena::CreateMaybeMessage< ::dbInteraction::selectedGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbInteraction::selectedGame >(arena);
}
template<> PROTOBUF_NOINLINE ::dbInteraction::registrationInfo* Arena::CreateMaybeMessage< ::dbInteraction::registrationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbInteraction::registrationInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

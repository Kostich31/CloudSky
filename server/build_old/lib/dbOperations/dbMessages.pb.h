// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbMessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dbMessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dbMessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dbMessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dbMessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dbMessages_2eproto;
namespace dbInteraction {
class authInformation;
struct authInformationDefaultTypeInternal;
extern authInformationDefaultTypeInternal _authInformation_default_instance_;
class registrationInfo;
struct registrationInfoDefaultTypeInternal;
extern registrationInfoDefaultTypeInternal _registrationInfo_default_instance_;
class registrationOrLogIn;
struct registrationOrLogInDefaultTypeInternal;
extern registrationOrLogInDefaultTypeInternal _registrationOrLogIn_default_instance_;
class selectedGame;
struct selectedGameDefaultTypeInternal;
extern selectedGameDefaultTypeInternal _selectedGame_default_instance_;
class serverAuthInformation;
struct serverAuthInformationDefaultTypeInternal;
extern serverAuthInformationDefaultTypeInternal _serverAuthInformation_default_instance_;
class serverRegInformation;
struct serverRegInformationDefaultTypeInternal;
extern serverRegInformationDefaultTypeInternal _serverRegInformation_default_instance_;
class transactionAnswer;
struct transactionAnswerDefaultTypeInternal;
extern transactionAnswerDefaultTypeInternal _transactionAnswer_default_instance_;
class transactionRequst;
struct transactionRequstDefaultTypeInternal;
extern transactionRequstDefaultTypeInternal _transactionRequst_default_instance_;
}  // namespace dbInteraction
PROTOBUF_NAMESPACE_OPEN
template<> ::dbInteraction::authInformation* Arena::CreateMaybeMessage<::dbInteraction::authInformation>(Arena*);
template<> ::dbInteraction::registrationInfo* Arena::CreateMaybeMessage<::dbInteraction::registrationInfo>(Arena*);
template<> ::dbInteraction::registrationOrLogIn* Arena::CreateMaybeMessage<::dbInteraction::registrationOrLogIn>(Arena*);
template<> ::dbInteraction::selectedGame* Arena::CreateMaybeMessage<::dbInteraction::selectedGame>(Arena*);
template<> ::dbInteraction::serverAuthInformation* Arena::CreateMaybeMessage<::dbInteraction::serverAuthInformation>(Arena*);
template<> ::dbInteraction::serverRegInformation* Arena::CreateMaybeMessage<::dbInteraction::serverRegInformation>(Arena*);
template<> ::dbInteraction::transactionAnswer* Arena::CreateMaybeMessage<::dbInteraction::transactionAnswer>(Arena*);
template<> ::dbInteraction::transactionRequst* Arena::CreateMaybeMessage<::dbInteraction::transactionRequst>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dbInteraction {

// ===================================================================

class authInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbInteraction.authInformation) */ {
 public:
  inline authInformation() : authInformation(nullptr) {}
  ~authInformation() override;
  explicit constexpr authInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  authInformation(const authInformation& from);
  authInformation(authInformation&& from) noexcept
    : authInformation() {
    *this = ::std::move(from);
  }

  inline authInformation& operator=(const authInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline authInformation& operator=(authInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const authInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const authInformation* internal_default_instance() {
    return reinterpret_cast<const authInformation*>(
               &_authInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(authInformation& a, authInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(authInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(authInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  authInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<authInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const authInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const authInformation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(authInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbInteraction.authInformation";
  }
  protected:
  explicit authInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:dbInteraction.authInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbMessages_2eproto;
};
// -------------------------------------------------------------------

class registrationOrLogIn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbInteraction.registrationOrLogIn) */ {
 public:
  inline registrationOrLogIn() : registrationOrLogIn(nullptr) {}
  ~registrationOrLogIn() override;
  explicit constexpr registrationOrLogIn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  registrationOrLogIn(const registrationOrLogIn& from);
  registrationOrLogIn(registrationOrLogIn&& from) noexcept
    : registrationOrLogIn() {
    *this = ::std::move(from);
  }

  inline registrationOrLogIn& operator=(const registrationOrLogIn& from) {
    CopyFrom(from);
    return *this;
  }
  inline registrationOrLogIn& operator=(registrationOrLogIn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const registrationOrLogIn& default_instance() {
    return *internal_default_instance();
  }
  static inline const registrationOrLogIn* internal_default_instance() {
    return reinterpret_cast<const registrationOrLogIn*>(
               &_registrationOrLogIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(registrationOrLogIn& a, registrationOrLogIn& b) {
    a.Swap(&b);
  }
  inline void Swap(registrationOrLogIn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(registrationOrLogIn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  registrationOrLogIn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<registrationOrLogIn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const registrationOrLogIn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const registrationOrLogIn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registrationOrLogIn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbInteraction.registrationOrLogIn";
  }
  protected:
  explicit registrationOrLogIn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kRegOrLogFieldNumber = 1,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // bool regOrLog = 1;
  void clear_regorlog();
  bool regorlog() const;
  void set_regorlog(bool value);
  private:
  bool _internal_regorlog() const;
  void _internal_set_regorlog(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dbInteraction.registrationOrLogIn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  bool regorlog_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbMessages_2eproto;
};
// -------------------------------------------------------------------

class serverAuthInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbInteraction.serverAuthInformation) */ {
 public:
  inline serverAuthInformation() : serverAuthInformation(nullptr) {}
  ~serverAuthInformation() override;
  explicit constexpr serverAuthInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  serverAuthInformation(const serverAuthInformation& from);
  serverAuthInformation(serverAuthInformation&& from) noexcept
    : serverAuthInformation() {
    *this = ::std::move(from);
  }

  inline serverAuthInformation& operator=(const serverAuthInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline serverAuthInformation& operator=(serverAuthInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const serverAuthInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const serverAuthInformation* internal_default_instance() {
    return reinterpret_cast<const serverAuthInformation*>(
               &_serverAuthInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(serverAuthInformation& a, serverAuthInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(serverAuthInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(serverAuthInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  serverAuthInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<serverAuthInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const serverAuthInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const serverAuthInformation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(serverAuthInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbInteraction.serverAuthInformation";
  }
  protected:
  explicit serverAuthInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorizationStatusFieldNumber = 1,
    kUserInfoFieldNumber = 2,
    kServerInfoFieldNumber = 3,
  };
  // int32 authorizationStatus = 1;
  void clear_authorizationstatus();
  int32_t authorizationstatus() const;
  void set_authorizationstatus(int32_t value);
  private:
  int32_t _internal_authorizationstatus() const;
  void _internal_set_authorizationstatus(int32_t value);
  public:

  // int32 userInfo = 2;
  void clear_userinfo();
  int32_t userinfo() const;
  void set_userinfo(int32_t value);
  private:
  int32_t _internal_userinfo() const;
  void _internal_set_userinfo(int32_t value);
  public:

  // int32 serverInfo = 3;
  void clear_serverinfo();
  int32_t serverinfo() const;
  void set_serverinfo(int32_t value);
  private:
  int32_t _internal_serverinfo() const;
  void _internal_set_serverinfo(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dbInteraction.serverAuthInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t authorizationstatus_;
  int32_t userinfo_;
  int32_t serverinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbMessages_2eproto;
};
// -------------------------------------------------------------------

class serverRegInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbInteraction.serverRegInformation) */ {
 public:
  inline serverRegInformation() : serverRegInformation(nullptr) {}
  ~serverRegInformation() override;
  explicit constexpr serverRegInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  serverRegInformation(const serverRegInformation& from);
  serverRegInformation(serverRegInformation&& from) noexcept
    : serverRegInformation() {
    *this = ::std::move(from);
  }

  inline serverRegInformation& operator=(const serverRegInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline serverRegInformation& operator=(serverRegInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const serverRegInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const serverRegInformation* internal_default_instance() {
    return reinterpret_cast<const serverRegInformation*>(
               &_serverRegInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(serverRegInformation& a, serverRegInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(serverRegInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(serverRegInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  serverRegInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<serverRegInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const serverRegInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const serverRegInformation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(serverRegInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbInteraction.serverRegInformation";
  }
  protected:
  explicit serverRegInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorizationStatusFieldNumber = 1,
    kUserInfoFieldNumber = 2,
    kServerInfoFieldNumber = 3,
  };
  // int32 authorizationStatus = 1;
  void clear_authorizationstatus();
  int32_t authorizationstatus() const;
  void set_authorizationstatus(int32_t value);
  private:
  int32_t _internal_authorizationstatus() const;
  void _internal_set_authorizationstatus(int32_t value);
  public:

  // int32 userInfo = 2;
  void clear_userinfo();
  int32_t userinfo() const;
  void set_userinfo(int32_t value);
  private:
  int32_t _internal_userinfo() const;
  void _internal_set_userinfo(int32_t value);
  public:

  // int32 serverInfo = 3;
  void clear_serverinfo();
  int32_t serverinfo() const;
  void set_serverinfo(int32_t value);
  private:
  int32_t _internal_serverinfo() const;
  void _internal_set_serverinfo(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dbInteraction.serverRegInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t authorizationstatus_;
  int32_t userinfo_;
  int32_t serverinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbMessages_2eproto;
};
// -------------------------------------------------------------------

class transactionRequst final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbInteraction.transactionRequst) */ {
 public:
  inline transactionRequst() : transactionRequst(nullptr) {}
  ~transactionRequst() override;
  explicit constexpr transactionRequst(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transactionRequst(const transactionRequst& from);
  transactionRequst(transactionRequst&& from) noexcept
    : transactionRequst() {
    *this = ::std::move(from);
  }

  inline transactionRequst& operator=(const transactionRequst& from) {
    CopyFrom(from);
    return *this;
  }
  inline transactionRequst& operator=(transactionRequst&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transactionRequst& default_instance() {
    return *internal_default_instance();
  }
  static inline const transactionRequst* internal_default_instance() {
    return reinterpret_cast<const transactionRequst*>(
               &_transactionRequst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(transactionRequst& a, transactionRequst& b) {
    a.Swap(&b);
  }
  inline void Swap(transactionRequst* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transactionRequst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  transactionRequst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<transactionRequst>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transactionRequst& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transactionRequst& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transactionRequst* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbInteraction.transactionRequst";
  }
  protected:
  explicit transactionRequst(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kProductIDFieldNumber = 1,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // int32 productID = 1;
  void clear_productid();
  int32_t productid() const;
  void set_productid(int32_t value);
  private:
  int32_t _internal_productid() const;
  void _internal_set_productid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dbInteraction.transactionRequst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  int32_t productid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbMessages_2eproto;
};
// -------------------------------------------------------------------

class transactionAnswer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbInteraction.transactionAnswer) */ {
 public:
  inline transactionAnswer() : transactionAnswer(nullptr) {}
  ~transactionAnswer() override;
  explicit constexpr transactionAnswer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transactionAnswer(const transactionAnswer& from);
  transactionAnswer(transactionAnswer&& from) noexcept
    : transactionAnswer() {
    *this = ::std::move(from);
  }

  inline transactionAnswer& operator=(const transactionAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  inline transactionAnswer& operator=(transactionAnswer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transactionAnswer& default_instance() {
    return *internal_default_instance();
  }
  static inline const transactionAnswer* internal_default_instance() {
    return reinterpret_cast<const transactionAnswer*>(
               &_transactionAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(transactionAnswer& a, transactionAnswer& b) {
    a.Swap(&b);
  }
  inline void Swap(transactionAnswer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transactionAnswer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  transactionAnswer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<transactionAnswer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transactionAnswer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transactionAnswer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transactionAnswer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbInteraction.transactionAnswer";
  }
  protected:
  explicit transactionAnswer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameAccessFieldNumber = 3,
    kTransactionStatusFieldNumber = 1,
    kCoinsFieldNumber = 2,
  };
  // repeated bool gameAccess = 3;
  int gameaccess_size() const;
  private:
  int _internal_gameaccess_size() const;
  public:
  void clear_gameaccess();
  private:
  bool _internal_gameaccess(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_gameaccess() const;
  void _internal_add_gameaccess(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_gameaccess();
  public:
  bool gameaccess(int index) const;
  void set_gameaccess(int index, bool value);
  void add_gameaccess(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      gameaccess() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_gameaccess();

  // int32 transactionStatus = 1;
  void clear_transactionstatus();
  int32_t transactionstatus() const;
  void set_transactionstatus(int32_t value);
  private:
  int32_t _internal_transactionstatus() const;
  void _internal_set_transactionstatus(int32_t value);
  public:

  // int32 coins = 2;
  void clear_coins();
  int32_t coins() const;
  void set_coins(int32_t value);
  private:
  int32_t _internal_coins() const;
  void _internal_set_coins(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dbInteraction.transactionAnswer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > gameaccess_;
  int32_t transactionstatus_;
  int32_t coins_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbMessages_2eproto;
};
// -------------------------------------------------------------------

class selectedGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbInteraction.selectedGame) */ {
 public:
  inline selectedGame() : selectedGame(nullptr) {}
  ~selectedGame() override;
  explicit constexpr selectedGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  selectedGame(const selectedGame& from);
  selectedGame(selectedGame&& from) noexcept
    : selectedGame() {
    *this = ::std::move(from);
  }

  inline selectedGame& operator=(const selectedGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline selectedGame& operator=(selectedGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const selectedGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const selectedGame* internal_default_instance() {
    return reinterpret_cast<const selectedGame*>(
               &_selectedGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(selectedGame& a, selectedGame& b) {
    a.Swap(&b);
  }
  inline void Swap(selectedGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(selectedGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  selectedGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<selectedGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const selectedGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const selectedGame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(selectedGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbInteraction.selectedGame";
  }
  protected:
  explicit selectedGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIDFieldNumber = 1,
  };
  // int32 gameID = 1;
  void clear_gameid();
  int32_t gameid() const;
  void set_gameid(int32_t value);
  private:
  int32_t _internal_gameid() const;
  void _internal_set_gameid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dbInteraction.selectedGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t gameid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbMessages_2eproto;
};
// -------------------------------------------------------------------

class registrationInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbInteraction.registrationInfo) */ {
 public:
  inline registrationInfo() : registrationInfo(nullptr) {}
  ~registrationInfo() override;
  explicit constexpr registrationInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  registrationInfo(const registrationInfo& from);
  registrationInfo(registrationInfo&& from) noexcept
    : registrationInfo() {
    *this = ::std::move(from);
  }

  inline registrationInfo& operator=(const registrationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline registrationInfo& operator=(registrationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const registrationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const registrationInfo* internal_default_instance() {
    return reinterpret_cast<const registrationInfo*>(
               &_registrationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(registrationInfo& a, registrationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(registrationInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(registrationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  registrationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<registrationInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const registrationInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const registrationInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registrationInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbInteraction.registrationInfo";
  }
  protected:
  explicit registrationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvailableGamesFieldNumber = 8,
    kEmailFieldNumber = 1,
    kUsernameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kCountryFieldNumber = 4,
    kFirstNameFieldNumber = 5,
    kSecondNameFieldNumber = 6,
    kCoinsFieldNumber = 7,
    kAgeFieldNumber = 9,
    kFPSFieldNumber = 10,
  };
  // repeated bool availableGames = 8;
  int availablegames_size() const;
  private:
  int _internal_availablegames_size() const;
  public:
  void clear_availablegames();
  private:
  bool _internal_availablegames(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_availablegames() const;
  void _internal_add_availablegames(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_availablegames();
  public:
  bool availablegames(int index) const;
  void set_availablegames(int index, bool value);
  void add_availablegames(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      availablegames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_availablegames();

  // string email = 1;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string country = 4;
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string firstName = 5;
  void clear_firstname();
  const std::string& firstname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firstname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firstname();
  PROTOBUF_NODISCARD std::string* release_firstname();
  void set_allocated_firstname(std::string* firstname);
  private:
  const std::string& _internal_firstname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firstname(const std::string& value);
  std::string* _internal_mutable_firstname();
  public:

  // string secondName = 6;
  void clear_secondname();
  const std::string& secondname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secondname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secondname();
  PROTOBUF_NODISCARD std::string* release_secondname();
  void set_allocated_secondname(std::string* secondname);
  private:
  const std::string& _internal_secondname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secondname(const std::string& value);
  std::string* _internal_mutable_secondname();
  public:

  // int32 coins = 7;
  void clear_coins();
  int32_t coins() const;
  void set_coins(int32_t value);
  private:
  int32_t _internal_coins() const;
  void _internal_set_coins(int32_t value);
  public:

  // int32 age = 9;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // int32 FPS = 10;
  void clear_fps();
  int32_t fps() const;
  void set_fps(int32_t value);
  private:
  int32_t _internal_fps() const;
  void _internal_set_fps(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dbInteraction.registrationInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > availablegames_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondname_;
  int32_t coins_;
  int32_t age_;
  int32_t fps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbMessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// authInformation

// string username = 1;
inline void authInformation::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& authInformation::username() const {
  // @@protoc_insertion_point(field_get:dbInteraction.authInformation.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void authInformation::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbInteraction.authInformation.username)
}
inline std::string* authInformation::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:dbInteraction.authInformation.username)
  return _s;
}
inline const std::string& authInformation::_internal_username() const {
  return username_.Get();
}
inline void authInformation::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* authInformation::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* authInformation::release_username() {
  // @@protoc_insertion_point(field_release:dbInteraction.authInformation.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void authInformation::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbInteraction.authInformation.username)
}

// string password = 2;
inline void authInformation::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& authInformation::password() const {
  // @@protoc_insertion_point(field_get:dbInteraction.authInformation.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void authInformation::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbInteraction.authInformation.password)
}
inline std::string* authInformation::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:dbInteraction.authInformation.password)
  return _s;
}
inline const std::string& authInformation::_internal_password() const {
  return password_.Get();
}
inline void authInformation::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* authInformation::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* authInformation::release_password() {
  // @@protoc_insertion_point(field_release:dbInteraction.authInformation.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void authInformation::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbInteraction.authInformation.password)
}

// -------------------------------------------------------------------

// registrationOrLogIn

// bool regOrLog = 1;
inline void registrationOrLogIn::clear_regorlog() {
  regorlog_ = false;
}
inline bool registrationOrLogIn::_internal_regorlog() const {
  return regorlog_;
}
inline bool registrationOrLogIn::regorlog() const {
  // @@protoc_insertion_point(field_get:dbInteraction.registrationOrLogIn.regOrLog)
  return _internal_regorlog();
}
inline void registrationOrLogIn::_internal_set_regorlog(bool value) {
  
  regorlog_ = value;
}
inline void registrationOrLogIn::set_regorlog(bool value) {
  _internal_set_regorlog(value);
  // @@protoc_insertion_point(field_set:dbInteraction.registrationOrLogIn.regOrLog)
}

// string username = 2;
inline void registrationOrLogIn::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& registrationOrLogIn::username() const {
  // @@protoc_insertion_point(field_get:dbInteraction.registrationOrLogIn.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void registrationOrLogIn::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbInteraction.registrationOrLogIn.username)
}
inline std::string* registrationOrLogIn::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:dbInteraction.registrationOrLogIn.username)
  return _s;
}
inline const std::string& registrationOrLogIn::_internal_username() const {
  return username_.Get();
}
inline void registrationOrLogIn::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* registrationOrLogIn::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* registrationOrLogIn::release_username() {
  // @@protoc_insertion_point(field_release:dbInteraction.registrationOrLogIn.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void registrationOrLogIn::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbInteraction.registrationOrLogIn.username)
}

// -------------------------------------------------------------------

// serverAuthInformation

// int32 authorizationStatus = 1;
inline void serverAuthInformation::clear_authorizationstatus() {
  authorizationstatus_ = 0;
}
inline int32_t serverAuthInformation::_internal_authorizationstatus() const {
  return authorizationstatus_;
}
inline int32_t serverAuthInformation::authorizationstatus() const {
  // @@protoc_insertion_point(field_get:dbInteraction.serverAuthInformation.authorizationStatus)
  return _internal_authorizationstatus();
}
inline void serverAuthInformation::_internal_set_authorizationstatus(int32_t value) {
  
  authorizationstatus_ = value;
}
inline void serverAuthInformation::set_authorizationstatus(int32_t value) {
  _internal_set_authorizationstatus(value);
  // @@protoc_insertion_point(field_set:dbInteraction.serverAuthInformation.authorizationStatus)
}

// int32 userInfo = 2;
inline void serverAuthInformation::clear_userinfo() {
  userinfo_ = 0;
}
inline int32_t serverAuthInformation::_internal_userinfo() const {
  return userinfo_;
}
inline int32_t serverAuthInformation::userinfo() const {
  // @@protoc_insertion_point(field_get:dbInteraction.serverAuthInformation.userInfo)
  return _internal_userinfo();
}
inline void serverAuthInformation::_internal_set_userinfo(int32_t value) {
  
  userinfo_ = value;
}
inline void serverAuthInformation::set_userinfo(int32_t value) {
  _internal_set_userinfo(value);
  // @@protoc_insertion_point(field_set:dbInteraction.serverAuthInformation.userInfo)
}

// int32 serverInfo = 3;
inline void serverAuthInformation::clear_serverinfo() {
  serverinfo_ = 0;
}
inline int32_t serverAuthInformation::_internal_serverinfo() const {
  return serverinfo_;
}
inline int32_t serverAuthInformation::serverinfo() const {
  // @@protoc_insertion_point(field_get:dbInteraction.serverAuthInformation.serverInfo)
  return _internal_serverinfo();
}
inline void serverAuthInformation::_internal_set_serverinfo(int32_t value) {
  
  serverinfo_ = value;
}
inline void serverAuthInformation::set_serverinfo(int32_t value) {
  _internal_set_serverinfo(value);
  // @@protoc_insertion_point(field_set:dbInteraction.serverAuthInformation.serverInfo)
}

// -------------------------------------------------------------------

// serverRegInformation

// int32 authorizationStatus = 1;
inline void serverRegInformation::clear_authorizationstatus() {
  authorizationstatus_ = 0;
}
inline int32_t serverRegInformation::_internal_authorizationstatus() const {
  return authorizationstatus_;
}
inline int32_t serverRegInformation::authorizationstatus() const {
  // @@protoc_insertion_point(field_get:dbInteraction.serverRegInformation.authorizationStatus)
  return _internal_authorizationstatus();
}
inline void serverRegInformation::_internal_set_authorizationstatus(int32_t value) {
  
  authorizationstatus_ = value;
}
inline void serverRegInformation::set_authorizationstatus(int32_t value) {
  _internal_set_authorizationstatus(value);
  // @@protoc_insertion_point(field_set:dbInteraction.serverRegInformation.authorizationStatus)
}

// int32 userInfo = 2;
inline void serverRegInformation::clear_userinfo() {
  userinfo_ = 0;
}
inline int32_t serverRegInformation::_internal_userinfo() const {
  return userinfo_;
}
inline int32_t serverRegInformation::userinfo() const {
  // @@protoc_insertion_point(field_get:dbInteraction.serverRegInformation.userInfo)
  return _internal_userinfo();
}
inline void serverRegInformation::_internal_set_userinfo(int32_t value) {
  
  userinfo_ = value;
}
inline void serverRegInformation::set_userinfo(int32_t value) {
  _internal_set_userinfo(value);
  // @@protoc_insertion_point(field_set:dbInteraction.serverRegInformation.userInfo)
}

// int32 serverInfo = 3;
inline void serverRegInformation::clear_serverinfo() {
  serverinfo_ = 0;
}
inline int32_t serverRegInformation::_internal_serverinfo() const {
  return serverinfo_;
}
inline int32_t serverRegInformation::serverinfo() const {
  // @@protoc_insertion_point(field_get:dbInteraction.serverRegInformation.serverInfo)
  return _internal_serverinfo();
}
inline void serverRegInformation::_internal_set_serverinfo(int32_t value) {
  
  serverinfo_ = value;
}
inline void serverRegInformation::set_serverinfo(int32_t value) {
  _internal_set_serverinfo(value);
  // @@protoc_insertion_point(field_set:dbInteraction.serverRegInformation.serverInfo)
}

// -------------------------------------------------------------------

// transactionRequst

// int32 productID = 1;
inline void transactionRequst::clear_productid() {
  productid_ = 0;
}
inline int32_t transactionRequst::_internal_productid() const {
  return productid_;
}
inline int32_t transactionRequst::productid() const {
  // @@protoc_insertion_point(field_get:dbInteraction.transactionRequst.productID)
  return _internal_productid();
}
inline void transactionRequst::_internal_set_productid(int32_t value) {
  
  productid_ = value;
}
inline void transactionRequst::set_productid(int32_t value) {
  _internal_set_productid(value);
  // @@protoc_insertion_point(field_set:dbInteraction.transactionRequst.productID)
}

// string username = 2;
inline void transactionRequst::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& transactionRequst::username() const {
  // @@protoc_insertion_point(field_get:dbInteraction.transactionRequst.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transactionRequst::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbInteraction.transactionRequst.username)
}
inline std::string* transactionRequst::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:dbInteraction.transactionRequst.username)
  return _s;
}
inline const std::string& transactionRequst::_internal_username() const {
  return username_.Get();
}
inline void transactionRequst::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transactionRequst::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transactionRequst::release_username() {
  // @@protoc_insertion_point(field_release:dbInteraction.transactionRequst.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transactionRequst::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbInteraction.transactionRequst.username)
}

// -------------------------------------------------------------------

// transactionAnswer

// int32 transactionStatus = 1;
inline void transactionAnswer::clear_transactionstatus() {
  transactionstatus_ = 0;
}
inline int32_t transactionAnswer::_internal_transactionstatus() const {
  return transactionstatus_;
}
inline int32_t transactionAnswer::transactionstatus() const {
  // @@protoc_insertion_point(field_get:dbInteraction.transactionAnswer.transactionStatus)
  return _internal_transactionstatus();
}
inline void transactionAnswer::_internal_set_transactionstatus(int32_t value) {
  
  transactionstatus_ = value;
}
inline void transactionAnswer::set_transactionstatus(int32_t value) {
  _internal_set_transactionstatus(value);
  // @@protoc_insertion_point(field_set:dbInteraction.transactionAnswer.transactionStatus)
}

// int32 coins = 2;
inline void transactionAnswer::clear_coins() {
  coins_ = 0;
}
inline int32_t transactionAnswer::_internal_coins() const {
  return coins_;
}
inline int32_t transactionAnswer::coins() const {
  // @@protoc_insertion_point(field_get:dbInteraction.transactionAnswer.coins)
  return _internal_coins();
}
inline void transactionAnswer::_internal_set_coins(int32_t value) {
  
  coins_ = value;
}
inline void transactionAnswer::set_coins(int32_t value) {
  _internal_set_coins(value);
  // @@protoc_insertion_point(field_set:dbInteraction.transactionAnswer.coins)
}

// repeated bool gameAccess = 3;
inline int transactionAnswer::_internal_gameaccess_size() const {
  return gameaccess_.size();
}
inline int transactionAnswer::gameaccess_size() const {
  return _internal_gameaccess_size();
}
inline void transactionAnswer::clear_gameaccess() {
  gameaccess_.Clear();
}
inline bool transactionAnswer::_internal_gameaccess(int index) const {
  return gameaccess_.Get(index);
}
inline bool transactionAnswer::gameaccess(int index) const {
  // @@protoc_insertion_point(field_get:dbInteraction.transactionAnswer.gameAccess)
  return _internal_gameaccess(index);
}
inline void transactionAnswer::set_gameaccess(int index, bool value) {
  gameaccess_.Set(index, value);
  // @@protoc_insertion_point(field_set:dbInteraction.transactionAnswer.gameAccess)
}
inline void transactionAnswer::_internal_add_gameaccess(bool value) {
  gameaccess_.Add(value);
}
inline void transactionAnswer::add_gameaccess(bool value) {
  _internal_add_gameaccess(value);
  // @@protoc_insertion_point(field_add:dbInteraction.transactionAnswer.gameAccess)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
transactionAnswer::_internal_gameaccess() const {
  return gameaccess_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
transactionAnswer::gameaccess() const {
  // @@protoc_insertion_point(field_list:dbInteraction.transactionAnswer.gameAccess)
  return _internal_gameaccess();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
transactionAnswer::_internal_mutable_gameaccess() {
  return &gameaccess_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
transactionAnswer::mutable_gameaccess() {
  // @@protoc_insertion_point(field_mutable_list:dbInteraction.transactionAnswer.gameAccess)
  return _internal_mutable_gameaccess();
}

// -------------------------------------------------------------------

// selectedGame

// int32 gameID = 1;
inline void selectedGame::clear_gameid() {
  gameid_ = 0;
}
inline int32_t selectedGame::_internal_gameid() const {
  return gameid_;
}
inline int32_t selectedGame::gameid() const {
  // @@protoc_insertion_point(field_get:dbInteraction.selectedGame.gameID)
  return _internal_gameid();
}
inline void selectedGame::_internal_set_gameid(int32_t value) {
  
  gameid_ = value;
}
inline void selectedGame::set_gameid(int32_t value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:dbInteraction.selectedGame.gameID)
}

// -------------------------------------------------------------------

// registrationInfo

// string email = 1;
inline void registrationInfo::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& registrationInfo::email() const {
  // @@protoc_insertion_point(field_get:dbInteraction.registrationInfo.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void registrationInfo::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbInteraction.registrationInfo.email)
}
inline std::string* registrationInfo::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:dbInteraction.registrationInfo.email)
  return _s;
}
inline const std::string& registrationInfo::_internal_email() const {
  return email_.Get();
}
inline void registrationInfo::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* registrationInfo::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* registrationInfo::release_email() {
  // @@protoc_insertion_point(field_release:dbInteraction.registrationInfo.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void registrationInfo::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (email_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbInteraction.registrationInfo.email)
}

// string username = 2;
inline void registrationInfo::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& registrationInfo::username() const {
  // @@protoc_insertion_point(field_get:dbInteraction.registrationInfo.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void registrationInfo::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbInteraction.registrationInfo.username)
}
inline std::string* registrationInfo::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:dbInteraction.registrationInfo.username)
  return _s;
}
inline const std::string& registrationInfo::_internal_username() const {
  return username_.Get();
}
inline void registrationInfo::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* registrationInfo::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* registrationInfo::release_username() {
  // @@protoc_insertion_point(field_release:dbInteraction.registrationInfo.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void registrationInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbInteraction.registrationInfo.username)
}

// string password = 3;
inline void registrationInfo::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& registrationInfo::password() const {
  // @@protoc_insertion_point(field_get:dbInteraction.registrationInfo.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void registrationInfo::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbInteraction.registrationInfo.password)
}
inline std::string* registrationInfo::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:dbInteraction.registrationInfo.password)
  return _s;
}
inline const std::string& registrationInfo::_internal_password() const {
  return password_.Get();
}
inline void registrationInfo::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* registrationInfo::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* registrationInfo::release_password() {
  // @@protoc_insertion_point(field_release:dbInteraction.registrationInfo.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void registrationInfo::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbInteraction.registrationInfo.password)
}

// string country = 4;
inline void registrationInfo::clear_country() {
  country_.ClearToEmpty();
}
inline const std::string& registrationInfo::country() const {
  // @@protoc_insertion_point(field_get:dbInteraction.registrationInfo.country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void registrationInfo::set_country(ArgT0&& arg0, ArgT... args) {
 
 country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbInteraction.registrationInfo.country)
}
inline std::string* registrationInfo::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:dbInteraction.registrationInfo.country)
  return _s;
}
inline const std::string& registrationInfo::_internal_country() const {
  return country_.Get();
}
inline void registrationInfo::_internal_set_country(const std::string& value) {
  
  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* registrationInfo::_internal_mutable_country() {
  
  return country_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* registrationInfo::release_country() {
  // @@protoc_insertion_point(field_release:dbInteraction.registrationInfo.country)
  return country_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void registrationInfo::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbInteraction.registrationInfo.country)
}

// string firstName = 5;
inline void registrationInfo::clear_firstname() {
  firstname_.ClearToEmpty();
}
inline const std::string& registrationInfo::firstname() const {
  // @@protoc_insertion_point(field_get:dbInteraction.registrationInfo.firstName)
  return _internal_firstname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void registrationInfo::set_firstname(ArgT0&& arg0, ArgT... args) {
 
 firstname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbInteraction.registrationInfo.firstName)
}
inline std::string* registrationInfo::mutable_firstname() {
  std::string* _s = _internal_mutable_firstname();
  // @@protoc_insertion_point(field_mutable:dbInteraction.registrationInfo.firstName)
  return _s;
}
inline const std::string& registrationInfo::_internal_firstname() const {
  return firstname_.Get();
}
inline void registrationInfo::_internal_set_firstname(const std::string& value) {
  
  firstname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* registrationInfo::_internal_mutable_firstname() {
  
  return firstname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* registrationInfo::release_firstname() {
  // @@protoc_insertion_point(field_release:dbInteraction.registrationInfo.firstName)
  return firstname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void registrationInfo::set_allocated_firstname(std::string* firstname) {
  if (firstname != nullptr) {
    
  } else {
    
  }
  firstname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firstname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (firstname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    firstname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbInteraction.registrationInfo.firstName)
}

// string secondName = 6;
inline void registrationInfo::clear_secondname() {
  secondname_.ClearToEmpty();
}
inline const std::string& registrationInfo::secondname() const {
  // @@protoc_insertion_point(field_get:dbInteraction.registrationInfo.secondName)
  return _internal_secondname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void registrationInfo::set_secondname(ArgT0&& arg0, ArgT... args) {
 
 secondname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbInteraction.registrationInfo.secondName)
}
inline std::string* registrationInfo::mutable_secondname() {
  std::string* _s = _internal_mutable_secondname();
  // @@protoc_insertion_point(field_mutable:dbInteraction.registrationInfo.secondName)
  return _s;
}
inline const std::string& registrationInfo::_internal_secondname() const {
  return secondname_.Get();
}
inline void registrationInfo::_internal_set_secondname(const std::string& value) {
  
  secondname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* registrationInfo::_internal_mutable_secondname() {
  
  return secondname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* registrationInfo::release_secondname() {
  // @@protoc_insertion_point(field_release:dbInteraction.registrationInfo.secondName)
  return secondname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void registrationInfo::set_allocated_secondname(std::string* secondname) {
  if (secondname != nullptr) {
    
  } else {
    
  }
  secondname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secondname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secondname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    secondname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbInteraction.registrationInfo.secondName)
}

// int32 coins = 7;
inline void registrationInfo::clear_coins() {
  coins_ = 0;
}
inline int32_t registrationInfo::_internal_coins() const {
  return coins_;
}
inline int32_t registrationInfo::coins() const {
  // @@protoc_insertion_point(field_get:dbInteraction.registrationInfo.coins)
  return _internal_coins();
}
inline void registrationInfo::_internal_set_coins(int32_t value) {
  
  coins_ = value;
}
inline void registrationInfo::set_coins(int32_t value) {
  _internal_set_coins(value);
  // @@protoc_insertion_point(field_set:dbInteraction.registrationInfo.coins)
}

// repeated bool availableGames = 8;
inline int registrationInfo::_internal_availablegames_size() const {
  return availablegames_.size();
}
inline int registrationInfo::availablegames_size() const {
  return _internal_availablegames_size();
}
inline void registrationInfo::clear_availablegames() {
  availablegames_.Clear();
}
inline bool registrationInfo::_internal_availablegames(int index) const {
  return availablegames_.Get(index);
}
inline bool registrationInfo::availablegames(int index) const {
  // @@protoc_insertion_point(field_get:dbInteraction.registrationInfo.availableGames)
  return _internal_availablegames(index);
}
inline void registrationInfo::set_availablegames(int index, bool value) {
  availablegames_.Set(index, value);
  // @@protoc_insertion_point(field_set:dbInteraction.registrationInfo.availableGames)
}
inline void registrationInfo::_internal_add_availablegames(bool value) {
  availablegames_.Add(value);
}
inline void registrationInfo::add_availablegames(bool value) {
  _internal_add_availablegames(value);
  // @@protoc_insertion_point(field_add:dbInteraction.registrationInfo.availableGames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
registrationInfo::_internal_availablegames() const {
  return availablegames_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
registrationInfo::availablegames() const {
  // @@protoc_insertion_point(field_list:dbInteraction.registrationInfo.availableGames)
  return _internal_availablegames();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
registrationInfo::_internal_mutable_availablegames() {
  return &availablegames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
registrationInfo::mutable_availablegames() {
  // @@protoc_insertion_point(field_mutable_list:dbInteraction.registrationInfo.availableGames)
  return _internal_mutable_availablegames();
}

// int32 age = 9;
inline void registrationInfo::clear_age() {
  age_ = 0;
}
inline int32_t registrationInfo::_internal_age() const {
  return age_;
}
inline int32_t registrationInfo::age() const {
  // @@protoc_insertion_point(field_get:dbInteraction.registrationInfo.age)
  return _internal_age();
}
inline void registrationInfo::_internal_set_age(int32_t value) {
  
  age_ = value;
}
inline void registrationInfo::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:dbInteraction.registrationInfo.age)
}

// int32 FPS = 10;
inline void registrationInfo::clear_fps() {
  fps_ = 0;
}
inline int32_t registrationInfo::_internal_fps() const {
  return fps_;
}
inline int32_t registrationInfo::fps() const {
  // @@protoc_insertion_point(field_get:dbInteraction.registrationInfo.FPS)
  return _internal_fps();
}
inline void registrationInfo::_internal_set_fps(int32_t value) {
  
  fps_ = value;
}
inline void registrationInfo::set_fps(int32_t value) {
  _internal_set_fps(value);
  // @@protoc_insertion_point(field_set:dbInteraction.registrationInfo.FPS)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbInteraction

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dbMessages_2eproto

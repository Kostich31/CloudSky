// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: keyboard_mouse_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_keyboard_5fmouse_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_keyboard_5fmouse_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_keyboard_5fmouse_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_keyboard_5fmouse_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_keyboard_5fmouse_5fmessage_2eproto;
namespace keyboard_mouse {
class buttons_coords;
struct buttons_coordsDefaultTypeInternal;
extern buttons_coordsDefaultTypeInternal _buttons_coords_default_instance_;
}  // namespace keyboard_mouse
PROTOBUF_NAMESPACE_OPEN
template<> ::keyboard_mouse::buttons_coords* Arena::CreateMaybeMessage<::keyboard_mouse::buttons_coords>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace keyboard_mouse {

// ===================================================================

class buttons_coords final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:keyboard_mouse.buttons_coords) */ {
 public:
  inline buttons_coords() : buttons_coords(nullptr) {}
  ~buttons_coords() override;
  explicit constexpr buttons_coords(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  buttons_coords(const buttons_coords& from);
  buttons_coords(buttons_coords&& from) noexcept
    : buttons_coords() {
    *this = ::std::move(from);
  }

  inline buttons_coords& operator=(const buttons_coords& from) {
    CopyFrom(from);
    return *this;
  }
  inline buttons_coords& operator=(buttons_coords&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const buttons_coords& default_instance() {
    return *internal_default_instance();
  }
  static inline const buttons_coords* internal_default_instance() {
    return reinterpret_cast<const buttons_coords*>(
               &_buttons_coords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(buttons_coords& a, buttons_coords& b) {
    a.Swap(&b);
  }
  inline void Swap(buttons_coords* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(buttons_coords* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  buttons_coords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<buttons_coords>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const buttons_coords& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const buttons_coords& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(buttons_coords* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "keyboard_mouse.buttons_coords";
  }
  protected:
  explicit buttons_coords(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kButtonPressedFieldNumber = 1,
    kXCoordFieldNumber = 2,
    kYCoordFieldNumber = 3,
  };
  // repeated bool button_pressed = 1;
  int button_pressed_size() const;
  private:
  int _internal_button_pressed_size() const;
  public:
  void clear_button_pressed();
  private:
  bool _internal_button_pressed(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_button_pressed() const;
  void _internal_add_button_pressed(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_button_pressed();
  public:
  bool button_pressed(int index) const;
  void set_button_pressed(int index, bool value);
  void add_button_pressed(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      button_pressed() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_button_pressed();

  // int64 x_coord = 2;
  void clear_x_coord();
  int64_t x_coord() const;
  void set_x_coord(int64_t value);
  private:
  int64_t _internal_x_coord() const;
  void _internal_set_x_coord(int64_t value);
  public:

  // int64 y_coord = 3;
  void clear_y_coord();
  int64_t y_coord() const;
  void set_y_coord(int64_t value);
  private:
  int64_t _internal_y_coord() const;
  void _internal_set_y_coord(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:keyboard_mouse.buttons_coords)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > button_pressed_;
  int64_t x_coord_;
  int64_t y_coord_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_keyboard_5fmouse_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// buttons_coords

// repeated bool button_pressed = 1;
inline int buttons_coords::_internal_button_pressed_size() const {
  return button_pressed_.size();
}
inline int buttons_coords::button_pressed_size() const {
  return _internal_button_pressed_size();
}
inline void buttons_coords::clear_button_pressed() {
  button_pressed_.Clear();
}
inline bool buttons_coords::_internal_button_pressed(int index) const {
  return button_pressed_.Get(index);
}
inline bool buttons_coords::button_pressed(int index) const {
  // @@protoc_insertion_point(field_get:keyboard_mouse.buttons_coords.button_pressed)
  return _internal_button_pressed(index);
}
inline void buttons_coords::set_button_pressed(int index, bool value) {
  button_pressed_.Set(index, value);
  // @@protoc_insertion_point(field_set:keyboard_mouse.buttons_coords.button_pressed)
}
inline void buttons_coords::_internal_add_button_pressed(bool value) {
  button_pressed_.Add(value);
}
inline void buttons_coords::add_button_pressed(bool value) {
  _internal_add_button_pressed(value);
  // @@protoc_insertion_point(field_add:keyboard_mouse.buttons_coords.button_pressed)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
buttons_coords::_internal_button_pressed() const {
  return button_pressed_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
buttons_coords::button_pressed() const {
  // @@protoc_insertion_point(field_list:keyboard_mouse.buttons_coords.button_pressed)
  return _internal_button_pressed();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
buttons_coords::_internal_mutable_button_pressed() {
  return &button_pressed_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
buttons_coords::mutable_button_pressed() {
  // @@protoc_insertion_point(field_mutable_list:keyboard_mouse.buttons_coords.button_pressed)
  return _internal_mutable_button_pressed();
}

// int64 x_coord = 2;
inline void buttons_coords::clear_x_coord() {
  x_coord_ = int64_t{0};
}
inline int64_t buttons_coords::_internal_x_coord() const {
  return x_coord_;
}
inline int64_t buttons_coords::x_coord() const {
  // @@protoc_insertion_point(field_get:keyboard_mouse.buttons_coords.x_coord)
  return _internal_x_coord();
}
inline void buttons_coords::_internal_set_x_coord(int64_t value) {
  
  x_coord_ = value;
}
inline void buttons_coords::set_x_coord(int64_t value) {
  _internal_set_x_coord(value);
  // @@protoc_insertion_point(field_set:keyboard_mouse.buttons_coords.x_coord)
}

// int64 y_coord = 3;
inline void buttons_coords::clear_y_coord() {
  y_coord_ = int64_t{0};
}
inline int64_t buttons_coords::_internal_y_coord() const {
  return y_coord_;
}
inline int64_t buttons_coords::y_coord() const {
  // @@protoc_insertion_point(field_get:keyboard_mouse.buttons_coords.y_coord)
  return _internal_y_coord();
}
inline void buttons_coords::_internal_set_y_coord(int64_t value) {
  
  y_coord_ = value;
}
inline void buttons_coords::set_y_coord(int64_t value) {
  _internal_set_y_coord(value);
  // @@protoc_insertion_point(field_set:keyboard_mouse.buttons_coords.y_coord)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace keyboard_mouse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_keyboard_5fmouse_5fmessage_2eproto
